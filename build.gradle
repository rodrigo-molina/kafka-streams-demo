plugins {
    id 'java'
    id 'application'
    id "com.bmuschko.docker-remote-api" version "5.2.0"
}

mainClassName = 'com.examples.kafka.streams.KafkaStreamApp'
version = '0.0.1'

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.compilerArgs << '-parameters'
}
jar {

    manifest {
        attributes 'Main-Class': 'com.examples.kafka.streams.KafkaStreamApp'
    } from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

dependencies {
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.28'
    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.28'
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    implementation group: 'org.apache.kafka', name: 'kafka-streams', version: '2.3.0'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.10.0'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.10.0'

    testImplementation group: 'org.apache.kafka', name: 'kafka-streams-test-utils', version: '2.3.0'
    testImplementation 'junit:junit:4.12'
}

repositories {
    jcenter()
}

// Docker Support
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

task buildImage(type: DockerBuildImage) {
    dependsOn jar
    inputDir = file('.')
    dockerFile = file('Dockerfile')
    buildArgs = ["JAR_FILE": jar.getArchiveName()]
    tags.add("${rootProject.name}:${version}")
}

task createContainer(type: DockerCreateContainer) {
    dependsOn buildImage
    targetImageId buildImage.getImageId()
    containerName = "kafka_streams_demo_${version}"
    autoRemove = true
}

task startContainer(type: DockerStartContainer) {
    dependsOn createContainer
    targetContainerId createContainer.getContainerId()
}
