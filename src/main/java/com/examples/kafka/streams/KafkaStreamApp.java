package com.examples.kafka.streams;

import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.KafkaStreams;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.StreamsConfig;
import org.apache.kafka.streams.errors.LogAndContinueExceptionHandler;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

import java.util.Properties;

import static com.examples.kafka.streams.utils.KafkaWindowsUtils.deleteTemporalFolderIfWindows;
import static java.lang.String.format;
import static org.apache.kafka.streams.StreamsConfig.DEFAULT_DESERIALIZATION_EXCEPTION_HANDLER_CLASS_CONFIG;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class KafkaStreamApp {

    private final static String applicationId = "KafkaStreamApp";
    private final static String clientIdConfig = "MyClientIdConfig";
    private final static String bootstrapServers = "localhost:9092";

    private static final Logger LOGGER = LogManager.getLogger(KafkaStreamApp.class);

    public static void main(String[] args) {
        Properties streamsConfiguration = streamsConfiguration();

        final StreamsBuilder builder = new StreamsBuilder();

        builder.stream("my-topic")
                .peek((key, value) -> LOGGER.info(format("Key: %s , Value: %s", key, value)));

        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsConfiguration);

        Runtime.getRuntime().addShutdownHook(new Thread(streams::close)); // Add shutdown hook to stop the Kafka Streams threads.

        streams.cleanUp();
        streams.start();
    }


    public static Properties streamsConfiguration() {
        deleteTemporalFolderIfWindows(applicationId);

        final Properties streamsConfiguration = new Properties();
        // Give the Streams application a unique name.  The name must be unique in the Kafka cluster
        // against which the application is run.
        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationId);
        streamsConfiguration.put(StreamsConfig.CLIENT_ID_CONFIG, clientIdConfig);
        // Where to find Kafka broker(s).
        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        // Specify default (de)serializers for record keys and for record values.
        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());
        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());
        streamsConfiguration.put(DEFAULT_DESERIALIZATION_EXCEPTION_HANDLER_CLASS_CONFIG, LogAndContinueExceptionHandler.class);
        return streamsConfiguration;
    }
}
